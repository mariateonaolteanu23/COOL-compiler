sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(constString, constInt, constBool,
        className, classObjTab, classProtObj, classDispTab,
        classInitSignature, functionSignature, classInitBody, functionInitBody) ::= <<
.data

.align 2
.globl class_nameTab
.globl Int_protObj
.globl String_protObj
.globl bool_const0
.globl bool_const1
.globl Main_protObj
.globl _int_tag
.globl _string_tag
.globl _bool_tag

_int_tag:
    .word 2
_string_tag:
    .word 3
_bool_tag:
    .word 4

<constString> #lista de strConstEntry.

<constInt> #lista de intConstEntry.

<constBool> #list de boolConstEntry.

class_nameTab:
<className> #lista de classNameEntry.

class_objTab:
    .word Object_protObj   #prototipul clasei.
    .word Object_init      #functia de initializare a unei clase.
    .word IO_protObj
    .word IO_init
    .word Int_protObj
    .word Int_init
    .word String_protObj
    .word String_init
    .word Bool_protObj
    .word Bool_init
    .word Main_protObj
    .word Main_init
<classObjTab> #lista de classObjTabEntry.

<classProtObj> #prototipul unei clase. lista de classProtObjEntry.

<classDispTab> #dispatch table clasa. ce functii poate apela fiecare clasa. lista de classDispTabEntry.

heap_start:
    .word 0

.text

<classInitSignature> #lista de classInitSignatureEntry. OK
<functionSignature> #lista de functionSignatureEntry. OK

<classInitBody> #lista de classInitBodyEntry. OK
<functionInitBody> #lista de functionInitBodyEntry. OK
>>



constStringEntry(index, size, indexLengthConstInt, value) ::= <<
str_const<index>:
    .word 3
    .word <size>
    .word String_dispTab
    .word int_const<indexLengthConstInt>
    .asciiz "<value>"
    .align 2
>>

constIntEntry(index, value) ::= <<
int_const<index>:
    .word 2
    .word 4
    .word Int_dispTab
    .word <value>
>>

constBoolEntry(index, value) ::= <<
bool_const<index>:
    .word 4
    .word 4
    .word Bool_dispTab
    .word <value>
>>



classNameEntry(className) ::= <<
    .word <className> #de fapt pointer catre str_const care retine numele clasei.
>>

classObjTabEntry(className) ::= <<
    .word <className>_protObj
    .word <className>_init
>>

classProtObjEntry(className, classTag, size, features) ::= <<
<className>_protObj:
    .word <classTag>
    .word <size>
    .word <className>_dispTable
    <features>
>>





classDispTabEntry(className, functions) ::= <<
<className>_dispTab:
    <functionPointer> #lista de functionPointerEntry.
>>

functionPointerEntry(className, funcName) ::= <<
.word <className>.<funcName>
>>





classInitSignatureEntry(className) ::= <<
.globl <className>_init
>>

functionSignatureEntry(className, funcName) ::= <<
.globl <className>.<funcName>
>>

classInitBodyEntry(className, body) ::= <<
<className>_init:
    <body>
>>

functionInitBodyEntry(className, funcName, body) ::= <<
<className>.<funcName>:
    <body>
>>
